#!/usr/bin/env ruby
#
# Hacker's Note - A command-line tool creates gitbook compatible structure for pentest and read team projects.
#
# @Author: KING SABRI - @KINGSABRI
#
lib = File.dirname(__FILE__) + '/../lib'
if File.directory?(lib)
  unless $:.include?(lib)
    $:.unshift(lib)
  end
end
require 'hackernote'
include HackerNote::Utils

options = {}
option_parser = OptionParser.new
option_parser.banner = "#{"Hacker's Note".bold} - Helps security professionals to organize their notes in a gitbook structure for PT/RT engagements."
option_parser.set_summary_indent '   '
option_parser.separator "\nHelp menu:".underline
option_parser.on('-p', '--project PROJECT_NAME', "Project Name") {|v| options[:project] = v}
option_parser.on('-l', '--list TARGET_LIST' , 'The target name or a text file contains list of targets') {|v| options[:list] = v}
option_parser.on('-g', '--git GIT_REPO_URL' , 'Configure git server URL') {|v| options[:git_url] = v}
option_parser.on('-h', '--help', 'Show this help message') {puts HackerNote::Utils.banner, option_parser; exit!}
option_parser.on_tail "\nUsage:\n".underline + "  ruby #{__FILE__} --project <project_name> --list <targetlist.txt>"
option_parser.on_tail "\nExample:".underline
option_parser.on_tail"  ruby #{__FILE__} --project PT_CustomerName_WebApp_01-01-2030 --list target_list.txt"
option_parser.on_tail"  ruby #{__FILE__} -p PT_CustomerName_WebApp_01-01-2030 -l example.com\n\n"

require 'pp'
begin
  option_parser.parse!
  gitbook = HackerNote::GitbookBuilder.new
  git      = HackerNote::Git.new
  case
    when options[:project] && options[:list] && options[:git_url]
      gitbook.build(options[:project], options[:list])
      print "\r\n".cls_upline
      git.setup(options[:project], options[:git_url])
      puts "\n[+] ".green.bold + "Happy Hacking!".bold
    when options[:project] && options[:list]
      gitbook.build(options[:project], options[:list])
      print "\r\n".cls_upline
      puts "[+] ".green.bold + "Happy Hacking!"
    when options[:project].nil? && options[:list].nil?
      puts HackerNote::Utils.banner
      puts option_parser
    when options[:project].nil?
      puts '[!] '.red + "Missing mandatory switch '-p/--project'"
      puts option_parser
    when options[:list].nil?
      puts '[!] '.red + "Missing mandatory switch '-l/--list'"
      puts option_parser
  end
rescue OptionParser::MissingArgument => e
  e.args.each {|arg| puts '[!] '.red + "#{e.reason.capitalize} for '#{arg}' option."}
  puts option_parser
rescue OptionParser::InvalidOption => e
  puts '[!] '.red + "#{e}"
  puts option_parser
rescue Exception => e
  puts e.backtrace
  puts e.backtrace_locations
  puts e
end


